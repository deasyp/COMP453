from typing import List
from typing import Optional
from sqlalchemy import ForeignKey
from sqlalchemy import String, Integer, Numeric, Float, Date
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship
from sqlalchemy import create_engine
from sqlalchemy.orm import Session
from sqlalchemy import select

# DB Connection: create_engine(DBMS_name+driver://<username>:<password>@<hostname>/<database_name>)
engine = create_engine("postgresql+psycopg2://postgres:Comp453@localhost/postgres")

#Define Classes/Tables
class Base(DeclarativeBase):
    pass

# Supplier Table
class Item(Base):
    __tablename__ = "Item"

    ItemID: Mapped[int] = mapped_column(Integer, primary_key=True)
    ItemName: Mapped[str] = mapped_column(String(100), nullable=False)
    CurrentPrice: Mapped[float] = mapped_column(Numeric(10, 2))
    PurchasePrice: Mapped[float] = mapped_column(Numeric(10, 2))
    Currency: Mapped[str] = mapped_column(String(3), default="USD")
    ExpirationDate: Mapped[Date] = mapped_column(Date)
    Unit: Mapped[str] = mapped_column(String(100))
    Quantity: Mapped[float] = mapped_column(Float)

    # 1-N relationship with Item
    items: Mapped[List["Item"]] = relationship("Item", back_populates="InventoryHistoryLog")

    def __repr__(self) -> str:
        return f"InventoryHistoryLog(LogID={self.LogID}, ChangeDate={self.ChangeDate})"


# Item Table
class Log(Base):
    __tablename__ = "Inventory History Log"
    
    InventoryHistoryLogID: Mapped[int] = mapped_column(Integer, primary_key=True)
    ChangeDate: Mapped[Date] = mapped_column(Date, nullable=False)
    ChangeType: Mapped[str] = mapped_column(String(100))
    Reason: Mapped[str] = mapped_column(String(100))
    User: Mapped[str] = mapped_column(String(100))

    Item: Mapped["Item"] = relationship("Item", back_populates="InventoryHistoryLog")

    # FK and relationship with InventoryHistoryLog
    InventoryHistoryLogID: Mapped[int] = mapped_column(Integer, ForeignKey("Item.ItemID"))
    InventoryHistoryLog: Mapped["InventoryHistoryLog"] = relationship(back_populates="items")

    def __repr__(self) -> str:
        return f"Item(ItemID={self.ItemID}, ItemName={self.ItemName})"
    
#Create Tables
Base.metadata.create_all(engine)

#Insert Data
with Session(engine) as session:

# Items
    item1 = Item(ItemName="Queen Butter", CurrentPrice=5.99, PurchasePrice=4.99, ExpirationDate="2025-12-31", Unit="Can", Quantity=100, InventoryHistoryLog=log1)
    item2 = Item(ItemName="Angus Beef Stew", CurrentPrice=10.99, PurchasePrice=8.99, ExpirationDate="2025-06-30", Unit="Pack", Quantity=80, InventoryHistoryLog=log1)
    item3 = Item(ItemName="ABC Frozen Salmon", CurrentPrice=15.99, PurchasePrice=17.99, ExpirationDate="2025-10-31", Unit="Pack", Quantity=200, InventoryHistoryLog=log1)
    item4 = Item(ItemName="DEF Pepperoni", CurrentPrice=2.99, PurchasePrice=2.89, ExpirationDate="2025-04-15", Unit="Pack", Quantity=80, InventoryHistoryLog=log1)
    item5 = Item(ItemName="I20 Barbecue Sauce", CurrentPrice=3.75, PurchasePrice=3.50, ExpirationDate="2025-10-10", Unit="Can", Quantity=50, InventoryHistoryLog=log1)
    item6 = Item(ItemName="Potato Chips ABC", CurrentPrice=2.75, PurchasePrice=2.25, ExpirationDate="2025-07-01", Unit="Bag", Quantity=3, InventoryHistoryLog=log2)
    item7 = Item(ItemName=" Whole Wheat Bread DEF", CurrentPrice=7.99, PurchasePrice=7.50, ExpirationDate="2025-10-31", Unit="Loaf", Quantity=90, InventoryHistoryLog=log2)
    item8 = Item(ItemName=" Yaay! Orange Juice", CurrentPrice=4.79, PurchasePrice=3.79, ExpirationDate="2025-10-31", Unit="Bottle", Quantity=150, InventoryHistoryLog=log2)
    item9 = Item(ItemName=" ABC Rice Noodles", CurrentPrice=2.79, PurchasePrice=2.50, ExpirationDate="2025-10-31", Unit="Can", Quantity=100, InventoryHistoryLog=log3)
    item10 = Item(ItemName=" Yaay! Pasta", CurrentPrice=3.50, PurchasePrice=2.99, ExpirationDate="2025-10-31", Unit="Pack", Quantity=100, InventoryHistoryLog=log3)


# Logs
    log1 = InventoryHistoryLog(ChangeDate=datetime.date(2023, 10, 17), ChangeType="Removal", Reason="Updated Quantity", User="John Doe")
    log2 = InventoryHistoryLog(ChangeDate=datetime.date(2023, 10, 18), ChangeType="Correction", Reason="Corrected Quantity", User="Jack Doe")
    log3 = InventoryHistoryLog(ChangeDate=datetime.date(2023, 10, 19), ChangeType="Removal", Reason="Shrinkage", User="Jill Doe")


# Add and commit all objects
    session.add_all([item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, log1, log2, log3])
    session.commit()

with Session(engine) as session:
    stmt = (
        select(Item.ItemName, Item.Quantity)
        .join(InventoryHistoryLog, InventoryHistoryLog.InventoryHistoryLogID == Item.InventoryHistoryLogID)
        .where(Log.ChangeType == "Removal")
    )
    results = session.execute(stmt).all()

    print("## Items with Inventory Log = Removal ##")
    for item_name, change_date, reason in results:
        print(f"Item: {item_name}, Change Date: {change_date}, Reason: {Reason}")

